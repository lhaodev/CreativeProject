{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/luhao/Desktop/Desktop - lu\\u2019s MacBook Pro/Mobile Development/CreativeProject/components/Developer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport MoodBtns from \".MoodBtns\";\nimport * as API from \"../utils/API\";\nimport DeveloperContext from \"./utils/DeveloperContext\";\n\nvar DeveloperInfo = function DeveloperInfo() {\n  var _useState = useState({\n    mood: \"\",\n    lifeLongLearner: true,\n    excitementLevel: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      developerState = _useState2[0],\n      setDeveloperState = _useState2[1];\n\n  function changeMood(mood) {\n    if (mood === \"determined\") {\n      developerState.excitementLevel += 10000;\n    } else {\n      developerState.excitementLevel -= 10000;\n    }\n\n    setDeveloperState(_objectSpread(_objectSpread({}, developerState), {}, {\n      mood: mood\n    }));\n  }\n\n  var _useContext = useContext(DeveloperContext),\n      mood = _useContext.mood,\n      excitementLevel = _useContext.excitementLevel;\n\n  useEffect(function () {\n    API.getDeveloper.then(function (res) {\n      setDeveloperState(res);\n    });\n  }, []);\n  return React.createElement(DeveloperContext.Provider, {\n    value: developerState,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(MoodBtns, {\n    changeMood: changeMood,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Status: \", mood), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Excitement Level: \", excitementLevel)));\n};\n\nexport default DeveloperInfo;","map":{"version":3,"sources":["/Users/luhao/Desktop/Desktop - luâ€™s MacBook Pro/Mobile Development/CreativeProject/components/Developer.js"],"names":["React","useContext","useEffect","MoodBtns","API","DeveloperContext","DeveloperInfo","useState","mood","lifeLongLearner","excitementLevel","developerState","setDeveloperState","changeMood","getDeveloper","then","res"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;;;;;;;;;AAIA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,GAAZ;AACA,OAAOC,gBAAP;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAExB,kBAA4CC,QAAQ,CAAC;AACjDC,IAAAA,IAAI,EAAE,EAD2C;AAEjDC,IAAAA,eAAe,EAAE,IAFgC;AAGjDC,IAAAA,eAAe,EAAE;AAHgC,GAAD,CAApD;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AAME,WAASC,UAAT,CAAoBL,IAApB,EAA0B;AACxB,QAAGA,IAAI,KAAK,YAAZ,EAA0B;AACxBG,MAAAA,cAAc,CAACD,eAAf,IAAkC,KAAlC;AACD,KAFD,MAGK;AACHC,MAAAA,cAAc,CAACD,eAAf,IAAkC,KAAlC;AACD;;AACDE,IAAAA,iBAAiB,iCACZD,cADY;AAEfH,MAAAA,IAAI,EAAJA;AAFe,OAAjB;AAID;;AAEL,oBAAkCP,UAAU,CAACI,gBAAD,CAA5C;AAAA,MAAQG,IAAR,eAAQA,IAAR;AAAA,MAAcE,eAAd,eAAcA,eAAd;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AAEdE,IAAAA,GAAG,CAACU,YAAJ,CAAiBC,IAAjB,CAAsB,UAACC,GAAD,EAAS;AAC7BJ,MAAAA,iBAAiB,CAACI,GAAD,CAAjB;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEL,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAEE,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACWL,IADX,CAFF,EAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACqBE,eADrB,CALF,CADA,CADF;AAaD,CA3CD;;AA6CA,eAAeJ,aAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\n\nimport {Button, Text, TextInput, View,StatusBar, StyleSheet, FlatList, SafeAreaView } from \"react-native\";\n\nimport MoodBtns from \".MoodBtns\";\nimport * as API from \"../utils/API\";\nimport DeveloperContext from \"./utils/DeveloperContext\";\n\nconst DeveloperInfo = () => {   \n\n    const [developerState, setDeveloperState] = useState({\n        mood: \"\",\n        lifeLongLearner: true,\n        excitementLevel: 0\n      });\n\n      function changeMood(mood) {\n        if(mood === \"determined\") {\n          developerState.excitementLevel += 10000;\n        }\n        else {\n          developerState.excitementLevel -= 10000;\n        }\n        setDeveloperState({\n          ...developerState,\n          mood\n        });\n      }\n\n  const { mood, excitementLevel } = useContext(DeveloperContext);\n\n  useEffect(() => {\n    // For demonstration purposes, we mock an API call.\n    API.getDeveloper.then((res) => {\n      setDeveloperState(res);\n    });\n  }, []);\n\n  return (\n    <DeveloperContext.Provider value={developerState}>\n    <View >\n    <MoodBtns changeMood={changeMood} />\n      <View>\n        Status: {mood}\n      </View>\n      <View>\n        Excitement Level: {excitementLevel}\n      </View>\n    </View>\n    </DeveloperContext.Provider>\n  );\n}\n\nexport default DeveloperInfo;\n"]},"metadata":{},"sourceType":"module"}